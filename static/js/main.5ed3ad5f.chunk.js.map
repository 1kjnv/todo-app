{"version":3,"sources":["api/client.js","features/filters/filtersSlice.js","features/todos/todosSlice.js","features/header/Header.js","features/filters/colors.js","features/todos/TodoListItem.js","features/todos/TodoList.js","features/footer/Footer.js","App.js","store.js","api/server.js","index.js"],"names":["client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","StatusFilters","All","Active","Completed","initialState","status","colors","filtersSlice","createSlice","name","reducers","statusFilterChanged","state","action","payload","colorFilterChanged","reducer","color","changeType","includes","push","filter","existingColor","prepare","actions","todosAdapter","createEntityAdapter","getInitialState","fetchTodos","createAsyncThunk","todos","saveNewTodo","text","initialTodo","todo","todosSlice","todoToggled","todoId","entities","completed","todoColorSelected","todoDeleted","removeOne","allTodosCompleted","Object","values","forEach","completedTodosCleared","completedIds","map","id","removeMany","extraReducers","builder","addCase","pending","fulfilled","setAll","addOne","todoAdded","getSelectors","selectTodos","selectAll","selectTodoById","selectById","selectFilteredTodos","createSelector","filters","showAllCompletions","length","completedStatus","statusMatches","colorMatches","selectFilteredTodoIds","filteredTodos","Header","useState","setText","setStatus","dispatch","useDispatch","isLoading","placeholder","loader","className","value","onChange","e","target","onKeyDown","trimmedText","trim","which","disabled","availableColors","capitalize","s","toUpperCase","slice","trashIcon","icon","faTrash","TodoListItem","useSelector","colorOptions","c","type","checked","style","onClick","TodoList","todoIds","renderedListItems","RemainingTodos","count","suffix","StatusFilter","renderedFilters","keys","key","ColorFilters","renderedColors","backgroundColor","Footer","todosRemaining","App","store","configureStore","todosReducer","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomFromArray","array","min","max","Math","ceil","floor","todoTemplates","base","Server","routes","this","namespace","timing","resource","server","schema","req","normalizedRequestAttrs","create","models","Model","list","hasMany","factories","Factory","i","Number","template","replace","generateTodoText","serializers","serialize","object","request","numerifyId","prototype","apply","arguments","seeds","createList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ed3ad5f.chunk.js","sourcesContent":["export async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  try {\n    const response = await window.fetch(endpoint, config)\n    data = await response.json()\n    if (response.ok) {\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}","import { createSlice } from '@reduxjs/toolkit'\n\nexport const StatusFilters = {\n  All: 'all',\n  Active: 'active',\n  Completed: 'completed',\n}\n\nconst initialState = {\n  status: StatusFilters.All,\n  colors: [],\n}\n\nconst filtersSlice = createSlice({\n  name: 'filters',\n  initialState,\n  reducers: {\n    statusFilterChanged(state, action) {\n      state.status = action.payload\n    },\n    colorFilterChanged: {\n      reducer(state, action) {\n        let { color, changeType } = action.payload\n        const { colors } = state\n        switch (changeType) {\n          case 'added': {\n            if (!colors.includes(color)) {\n              colors.push(color)\n            }\n            break\n          }\n          case 'removed': {\n            state.colors = colors.filter(\n              (existingColor) => existingColor !== color\n            )\n            break\n          }\n          default:\n            return\n        }\n      },\n      prepare(color, changeType) {\n        return {\n          payload: { color, changeType },\n        }\n      },\n    },\n  },\n})\n\nexport const { statusFilterChanged, colorFilterChanged } = filtersSlice.actions\nexport default filtersSlice.reducer","import { createSlice,\n\tcreateSelector,\n\tcreateAsyncThunk,\n\tcreateEntityAdapter \n} from '@reduxjs/toolkit';\nimport { client } from '../../api/client';\nimport { StatusFilters } from '../filters/filtersSlice';\n\nconst todosAdapter = createEntityAdapter();\n\n// todos slice\nconst initialState = todosAdapter.getInitialState({\n\tstatus: 'idle',\n});\n\n// Thunk functions\nexport const fetchTodos = createAsyncThunk(\n\t'todos/fetchTodos', \n\tasync () => {\n\tconst response = await client.get('/fakeApi/todos');\n\treturn response.todos;\n})\n\nexport const saveNewTodo = createAsyncThunk(\n\t'todos/saveNewTodo', \n\tasync text => {\n\tconst initialTodo = { text };\n\tconst response = await client.post('/fakeApi/todos', { todo: initialTodo });\n\treturn response.todo;\n})\n\nconst todosSlice = createSlice({\n\tname: 'todos',\n\tinitialState,\n\treducers: {\n\t\ttodoToggled(state, action) {\n\t\t\tconst todoId = action.payload;\n\t\t\tconst todo = state.entities[todoId];\n\t\t\ttodo.completed = !todo.completed;\n\t\t},\n\t\ttodoColorSelected: {\n\t\t\treducer(state, action) {\n\t\t\t\tconst { color, todoId } = action.payload;\n\t\t\t\tstate.entities[todoId].color = color;\n\t\t\t},\n\t\t\tprepare(todoId, color) {\n\t\t\t\treturn {\n\t\t\t\t\tpayload: { todoId, color }\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\ttodoDeleted: todosAdapter.removeOne,\n\t\tallTodosCompleted(state, action) {\n\t\t\tObject.values(state.entities).forEach((todo) => {\n\t\t\t\ttodo.completed = true;\n\t\t\t});\n\t\t},\n\t\tcompletedTodosCleared(state, action) {\n\t\t\tconst completedIds = Object.values(state.entities)\n\t\t\t\t.filter((todo) => todo.completed)\n\t\t\t\t.map((todo) => todo.id)\n\t\t\ttodosAdapter.removeMany(state, completedIds)\n\t\t},\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder\n\t\t\t.addCase(fetchTodos.pending, (state, action) => {\n\t\t\t\tstate.status = 'loading';\n\t\t\t})\n\t\t\t.addCase(fetchTodos.fulfilled, (state, action) => {\n\t\t\t\ttodosAdapter.setAll(state, action.payload);\n\t\t\t\tstate.status = 'idle';\n\t\t\t})\n\t\t\t.addCase(saveNewTodo.fulfilled, todosAdapter.addOne)\n\t}\n})\n\nexport const {\n\ttodoAdded, \n\ttodoToggled,\n\ttodoColorSelected, \n\ttodoDeleted, \n\tallTodosCompleted,\n\tcompletedTodosCleared\n} = todosSlice.actions;\n\nexport default todosSlice.reducer;\n\nexport const {\n\tselectAll: selectTodos,\n\tselectById: selectTodoById,\n} = todosAdapter.getSelectors((state) => state.todos);\n\nexport const selectTodoIds = createSelector(\n\tselectTodos,\n\t(todos => todos.map((todo) => todo.id))\n)\n\nexport const selectFilteredTodos = createSelector(\n\tselectTodos,\n\t(state) => state.filters,\n\t(todos, filters) => {\n\t\tconst { status, colors } = filters;\n\t\tconst showAllCompletions = status === StatusFilters.All;\n\t\tif(showAllCompletions && colors.length === 0) {\n\t\t\treturn todos;\n\t\t}\n\n\t\tconst completedStatus = status === StatusFilters.Completed;\n\t\treturn todos.filter((todo) => {\n\t\t\tconst statusMatches =\n\t\t\t\tshowAllCompletions || todo.completed === completedStatus;\n\t\t\tconst colorMatches = colors.length === 0 || colors.includes(todo.color);\n\t\t\treturn statusMatches && colorMatches;\n\t\t})\n\t}\n)\n\nexport const selectFilteredTodoIds = createSelector(\n\tselectFilteredTodos,\n\t(filteredTodos) => filteredTodos.map((todo) => todo.id)\n)","import React, { useState } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { saveNewTodo } from '../todos/todosSlice'\n\nconst Header = () => {\n  const [text, setText] = useState('')\n\tconst [status, setStatus] = useState('idle')\n  const dispatch = useDispatch()\n\n  const handleChange = e => setText(e.target.value)\n\n  const handleKeyDown = e => {\n    const trimmedText = text.trim()\n    if (e.which === 13 && trimmedText) {\n\t\t\tsetStatus('loading')\n      dispatch(saveNewTodo(trimmedText))\n      setText('')\n\t\t\tsetStatus('idle')\n    }\n  }\n\n\tlet isLoading = status === 'loading'\n\tlet placeholder = isLoading ? '' : 'Add a new todo item'\n\tlet loader = isLoading ? <div className=\"loader\" /> : null\n\n  return (\n    <header className=\"header\">\n      <input\n        className=\"new-todo\"\n        placeholder={placeholder}\n        value={text}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n\t\t\t\tdisabled={isLoading}\n      />\n\t\t\t{loader}\n    </header>\n  )\n}\n\nexport default Header","export const availableColors = ['green','blue','orange','purple','red'];\n\nexport const capitalize = (s) => s[0].toUpperCase() + s.slice(1);\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { availableColors, capitalize } from '../filters/colors'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\n\nimport {\n  todoColorSelected,\n  todoDeleted,\n  todoToggled,\n  selectTodoById,\n} from './todosSlice'\n\nconst trashIcon = <FontAwesomeIcon icon={faTrash} />\n\nconst TodoListItem = ({ id }) => {\n  const todo = useSelector((state) => selectTodoById(state, id))\n  const { text, completed, color } = todo\n\n  const dispatch = useDispatch()\n\n  const handleCompletedChanged = () => {\n    dispatch(todoToggled(todo.id));\n  }\n\n  const handleColorChanged = (e) => {\n    const color = e.target.value\n    dispatch(todoColorSelected(todo.id, color));\n  }\n\n  const onDelete = () => {\n    dispatch(todoDeleted(todo.id));\n  }\n\n  const colorOptions = availableColors.map((c) => (\n    <option key={c} value={c}>\n      {capitalize(c)}\n    </option>\n  ))\n\n  return (\n    <li>\n      <div className=\"view\">\n        <div className=\"segment label\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            checked={completed}\n            onChange={handleCompletedChanged}\n          />\n          <div className=\"todo-text\">{text}</div>\n        </div>\n        <div className=\"segment buttons\">\n          <select\n            className=\"colorPicker\"\n            value={color}\n            style={{ color }}\n            onChange={handleColorChanged}\n          >\n            <option value=\"\"></option>\n            {colorOptions}\n          </select>\n          <button className=\"destroy\" onClick={onDelete}>\n            {trashIcon}\n          </button>\n        </div>\n      </div>\n    </li>\n  )\n}\n\nexport default TodoListItem\n\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectFilteredTodoIds } from './todosSlice';\nimport TodoListItem from './TodoListItem'\n\nconst TodoList = () => {\n  const todoIds = useSelector(selectFilteredTodoIds);\n\tconst loadingStatus = useSelector((state) => state.todos.status);\n\n\tif(loadingStatus === 'loading') {\n\t\treturn(\n\t\t\t<div className=\"todo-list\">\n\t\t\t\t<div className=\"loader\" />\n\t\t\t</div>\n\t\t)\n\t}\n\n  const renderedListItems = todoIds.map((todoId) => {\n    return <TodoListItem key={todoId} id={todoId} />\n  });\n\n  return <ul className=\"todo-list\">{renderedListItems}</ul>\n}\n\nexport default TodoList;","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { availableColors, capitalize } from '../filters/colors'\nimport { StatusFilters, colorFilterChanged } from '../filters/filtersSlice'\nimport { selectTodos, completedTodosCleared, allTodosCompleted } from '../todos/todosSlice';\n\nconst RemainingTodos = ({ count }) => {\n  const suffix = count === 1 ? '' : 's'\n\n  return (\n    <div className=\"todo-count\">\n      <h5>Remaining Todos</h5>\n      <strong>{count}</strong> item{suffix} left\n    </div>\n  )\n}\n\nconst StatusFilter = ({ value: status, onChange }) => {\n  const renderedFilters = Object.keys(StatusFilters).map((key) => {\n    const value = StatusFilters[key]\n    const handleClick = () => onChange(value)\n    const className = value === status ? 'selected' : ''\n\n    return (\n      <li key={value}>\n        <button className={className} onClick={handleClick}>\n          {key}\n        </button>\n      </li>\n    )\n  })\n\n  return (\n    <div className=\"filters statusFilters\">\n      <h5>Filter by Status</h5>\n      <ul>{renderedFilters}</ul>\n    </div>\n  )\n}\n\nconst ColorFilters = ({ value: colors, onChange }) => {\n  const renderedColors = availableColors.map((color) => {\n    const checked = colors.includes(color)\n    const handleChange = () => {\n      const changeType = checked ? 'removed' : 'added'\n      onChange(color, changeType)\n    }\n\n    return (\n      <label key={color}>\n        <input\n          type=\"checkbox\"\n          name={color}\n          checked={checked}\n          onChange={handleChange}\n        />\n        <span\n          className=\"color-block\"\n          style={{\n            backgroundColor: color,\n          }}\n        ></span>\n        {capitalize(color)}\n      </label>\n    )\n  })\n\n  return (\n    <div className=\"filters colorFilters\">\n      <h5>Filter by Color</h5>\n      <form className=\"colorSelection\">{renderedColors}</form>\n    </div>\n  )\n}\n\nconst Footer = () => {\n  const dispatch = useDispatch()\n\n  const todosRemaining = useSelector((state) => {\n    const uncompletedTodos = selectTodos(state).filter((todo) => !todo.completed)\n    return uncompletedTodos.length\n  })\n\n  const { status, colors } = useSelector((state) => state.filters)\n\n  const onMarkCompletedClicked = () => dispatch(allTodosCompleted())\n  const onClearCompletedClicked = () =>\n    dispatch(completedTodosCleared())\n\n  const onColorChange = (color, changeType) =>\n    dispatch(colorFilterChanged(color, changeType));\n\n  const onStatusChange = (status) =>\n    dispatch({ type: 'filters/statusFilterChanged', payload: status })\n\n  return (\n    <footer className=\"footer\">\n      <div className=\"actions\">\n        <h5>Actions</h5>\n        <button className=\"button\" onClick={onMarkCompletedClicked}>\n          Mark All Completed\n        </button>\n        <button className=\"button\" onClick={onClearCompletedClicked}>\n          Clear Completed\n        </button>\n      </div>\n\n      <RemainingTodos count={todosRemaining} />\n      <StatusFilter value={status} onChange={onStatusChange} />\n      <ColorFilters value={colors} onChange={onColorChange} />\n    </footer>\n  )\n}\n\nexport default Footer\n\n","import React from 'react'\n\nimport Header from './features/header/Header'\nimport TodoList from './features/todos/TodoList'\nimport Footer from './features/footer/Footer'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav>\n        <section id=\"title\">\n          <h1>React-Redux Todo app</h1>\n        </section>\n      </nav>\n      <main>\n        <section className=\"medium-container\">\n          <h2>Todos</h2>\n          <div className=\"todoapp\">\n            <Header />\n            <TodoList />\n            <Footer />\n          </div>\n        </section>\n        <section className=\"footer\">\n          <p>Developed by Abdurauf</p>\n        </section>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n\n","import { configureStore } from '@reduxjs/toolkit';\nimport todosReducer from './features/todos/todosSlice';\nimport filtersSlice from './features/filters/filtersSlice';\n\nconst store = configureStore({\n    reducer: {\n        todos: todosReducer,\n        filters: filtersSlice\n    }\n})\n\nexport default store;\n","import { Server, Model, Factory, hasMany, RestSerializer } from 'miragejs'\n\nimport faker from 'faker'\nimport seedrandom from 'seedrandom'\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always',\n})\n\nlet useSeededRNG = false\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\nconst todoTemplates = [\n  { base: 'Buy $THING', values: ['milk', 'bread', 'cheese', 'toys'] },\n  { base: 'Clean $THING', values: ['house', 'yard', 'bedroom', 'car'] },\n  { base: 'Read $THING', values: ['newspaper', 'book', 'email'] },\n]\n\nconst generateTodoText = () => {\n  const template = randomFromArray(todoTemplates)\n  const value = randomFromArray(template.values)\n  const text = template.base.replace('$THING', value)\n  return text\n}\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    this.timing = 1000\n\n    this.resource('todos')\n    this.resource('lists')\n\n    const server = this\n\n    this.post('/todos', function (schema, req) {\n      const data = this.normalizedRequestAttrs()\n\n      if (data.text === 'error') {\n        throw new Error('Could not save the todo!')\n      }\n\n      const result = server.create('todo', data)\n      return result\n    })\n  },\n  models: {\n    todo: Model.extend({}),\n    list: Model.extend({\n      todos: hasMany(),\n    }),\n  },\n  factories: {\n    todo: Factory.extend({\n      id(i) {\n        return Number(i)\n      },\n      text() {\n        return generateTodoText()\n      },\n      completed() {\n        return false\n      },\n      color() {\n        return ''\n      },\n    }),\n  },\n  serializers: {\n    todo: IdSerializer.extend({\n      serialize(object, request) {\n        // HACK Mirage keeps wanting to store integer IDs as strings. Always convert them to numbers for now.\n        const numerifyId = (todo) => {\n          todo.id = Number(todo.id)\n        }\n        let json = IdSerializer.prototype.serialize.apply(this, arguments)\n\n        if (json.todo) {\n          numerifyId(json.todo)\n        } else if (json.todos) {\n          json.todos.forEach(numerifyId)\n        }\n\n        return json\n      },\n    }),\n    list: IdSerializer,\n  },\n  seeds(server) {\n    server.createList('todo', 5)\n  },\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { fetchTodos } from './features/todos/todosSlice'\nimport './api/server'\n\nstore.dispatch(fetchTodos());\n\nReactDOM.render(\n  <React.StrictMode>\n\t\t<Provider store={store}>\n\t    <App />\n\t\t</Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}